{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../src/api/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { QuerySyntaxEnum, IQueryResult, Table, Limit, SortingData, FunctionData, Property, IQuery, ExpressionOrExpressionScope } from '@chego/chego-api';\nimport { Join, QueryPipelinesMap } from './types';\n\nexport interface IConditionsBuilder {\n    add(type: QuerySyntaxEnum,  ...values: any[]): void;\n    build(): ExpressionOrExpressionScope[];\n}\n\nexport interface IJoinBuilder {\n    withOn(propertyA:Property, propertyB:Property): IJoinBuilder;\n    using(property:Property): IJoinBuilder;\n    build(): Join;\n}\n\nexport interface IQueriesExecutor {\n    withPipelines(pipelines: QueryPipelinesMap): IQueriesExecutor;\n    withDBRef(client: any): IQueriesExecutor;\n    execute(queries: IQuery[]): Promise<any>;\n}\n\nexport interface IQueryContextBuilder {\n    with(type: QuerySyntaxEnum, params: any[]): void;\n    build(): IQueryContext;\n}\n\nexport interface IQueryContext {\n    type:QuerySyntaxEnum;\n    result:IQueryResult;\n    data:any[];\n    tables:Table[];\n    joins:Join[];\n    unions:any[];\n    limit:Limit;\n    orderBy:SortingData[];\n    groupBy:SortingData[];\n    functions:FunctionData[];\n    conditions:ExpressionOrExpressionScope[];\n}"]}