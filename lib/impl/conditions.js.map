{"version":3,"file":"conditions.js","sourceRoot":"","sources":["../../src/impl/conditions.ts"],"names":[],"mappings":"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","sourcesContent":["import { PropertyOrLogicalOperatorScope, QuerySyntaxEnum, Property, ExpressionOrExpressionScope, Fn } from '@chego/chego-api';\r\nimport { isLogicalOperatorScope, newExpressionScope, newExpression, newLogicalOperatorScope, isExpressionScope } from '@chego/chego-tools';\r\nimport { IConditionsBuilder } from '../api/interfaces';\r\n\r\nconst isAndOr = (type: QuerySyntaxEnum): boolean => type === QuerySyntaxEnum.And || type === QuerySyntaxEnum.Or;\r\n\r\nconst parseValue = (value:any) => {\r\n    if(value.table === null && value.type === -1 && value.alias === '') {\r\n        return value.name;\r\n    }\r\n    return value;\r\n}\r\n\r\nconst handleValues = (type: QuerySyntaxEnum, negation:boolean, property: Property, values: any[]): ExpressionOrExpressionScope[] =>\r\n    values.reduce((list: ExpressionOrExpressionScope[], value: any) =>\r\n        (list.push(isLogicalOperatorScope(value)\r\n            ? newExpressionScope(value.type, handleValues(type, negation, property, value.properties))\r\n            : newExpression(type, negation, property, parseValue(value))\r\n        ), list), []);\r\n\r\nconst handleMultipleKeys = (type: QuerySyntaxEnum, negation:boolean, keychain: PropertyOrLogicalOperatorScope[], values?: any[]): ExpressionOrExpressionScope[] =>\r\n    keychain.reduce((list: ExpressionOrExpressionScope[], c: PropertyOrLogicalOperatorScope) =>\r\n        list.concat(isLogicalOperatorScope(c)\r\n            ? [newExpressionScope(c.type, handleMultipleKeys(type, negation, c.properties, values))]\r\n            : handleValues(type, negation, c, values)\r\n        ), []);\r\n\r\nexport const newConditionsBuilder = (history:QuerySyntaxEnum[]): IConditionsBuilder => {\r\n    const conditions: any[] = [];\r\n    let keychain: PropertyOrLogicalOperatorScope[] = [];\r\n    let negation: boolean = false;\r\n    let root: any[] = conditions;\r\n\r\n    const handleKeychain = (type: QuerySyntaxEnum) => (...keys: PropertyOrLogicalOperatorScope[]): void => {\r\n        const lastType: QuerySyntaxEnum = history[history.length - 1];\r\n        const penultimateType: QuerySyntaxEnum = history[history.length - 2];\r\n\r\n        if (isAndOr(lastType) && penultimateType === type) {\r\n            const lastKey: PropertyOrLogicalOperatorScope = keychain[keychain.length - 1];\r\n            if (!isLogicalOperatorScope(lastKey)) {\r\n                throw new Error(`Key ${lastKey} should be LogialOperatorScope type!`)\r\n            }\r\n            lastKey.properties.push(...keys);\r\n        } else {\r\n            keychain = [...keys];\r\n        }\r\n    }\r\n\r\n    const handleLogicalOperator = (type: QuerySyntaxEnum) => (): void => {\r\n        const lastType: QuerySyntaxEnum = history[history.length - 1];\r\n        if (lastType === QuerySyntaxEnum.Where) {\r\n            const last = keychain.pop();\r\n            if (isLogicalOperatorScope(last) && last.type === type) {\r\n                keychain.push(last);\r\n            } else {\r\n                keychain.push(newLogicalOperatorScope(type, [last]))\r\n            }\r\n        } \r\n        else {\r\n            const last: ExpressionOrExpressionScope = root.pop();\r\n            if(last) {\r\n                root.push(newExpressionScope(type, [last]));\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleCondition = (type: QuerySyntaxEnum, values?: any[]): void => {\r\n        const multipleKeys:boolean = (keychain.length > 1 || isLogicalOperatorScope(keychain[0]));\r\n        const expressions = multipleKeys\r\n            ? handleMultipleKeys(type, negation, keychain, values)\r\n            : handleValues(type, negation, <Property>keychain[0], values);\r\n\r\n        const last: ExpressionOrExpressionScope = root.pop();\r\n        if (isExpressionScope(last)) {\r\n            last.expressions.push(...expressions);\r\n            root.push(last);\r\n        } else {\r\n            root.push(...expressions);\r\n        }\r\n        negation = false;\r\n    }\r\n\r\n    const openParentheses = () => {\r\n        root = [];\r\n    }\r\n\r\n    const closeParentheses = () => {\r\n        const last: ExpressionOrExpressionScope = conditions.pop();\r\n        if (isExpressionScope(last)) {\r\n            last.expressions.push(...root);\r\n            conditions.push(last);\r\n        } else {\r\n            conditions.push(last, ...root);\r\n        }\r\n        root = conditions;\r\n    }\r\n\r\n    const setNegation = () => {\r\n        negation = true;\r\n    }\r\n\r\n    const handles = new Map<QuerySyntaxEnum, Fn<void>>([\r\n        [QuerySyntaxEnum.Where, handleKeychain(QuerySyntaxEnum.Where)],\r\n        [QuerySyntaxEnum.Having, handleKeychain(QuerySyntaxEnum.Having)],\r\n        [QuerySyntaxEnum.OpenParentheses, openParentheses],\r\n        [QuerySyntaxEnum.CloseParentheses, closeParentheses],\r\n        [QuerySyntaxEnum.Not, setNegation],\r\n        [QuerySyntaxEnum.And, handleLogicalOperator(QuerySyntaxEnum.And)],\r\n        [QuerySyntaxEnum.Or, handleLogicalOperator(QuerySyntaxEnum.Or)]\r\n    ]);\r\n\r\n    return {\r\n        add(type: QuerySyntaxEnum, ...values: any[]): void {\r\n            const handle = handles.get(type);\r\n            if (handle) {\r\n                handle(...values);\r\n            } else {\r\n                handleCondition(type, values);\r\n            }\r\n        },\r\n        build(): ExpressionOrExpressionScope[] {\r\n            return conditions;\r\n        }\r\n    }\r\n}"]}