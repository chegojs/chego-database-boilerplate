{"version":3,"file":"joins.js","sourceRoot":"","sources":["../../src/impl/joins.ts"],"names":[],"mappings":"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","sourcesContent":["import { createEmptyObject, newRow, isNumeric } from './utils';\r\nimport { IQueryContext, IJoinBuilder } from '../api/interfaces';\r\nimport { Row, Join, DataMap, JoinType } from '../api/types';\r\nimport { AnyButFunction, QuerySyntaxEnum, Fn, Property, Table } from '@chego/chego-api';\r\nimport { isRowId, getLabel, newProperty } from '@chego/chego-tools';\r\nimport { parseDataSnapshotToRows } from './queryProcessingUtils';\r\n\r\nexport const newJoin = (type:JoinType, property:Property): Join => ({type, propertyB:property, propertyA:newProperty({})});\r\n\r\nexport const newJoinBuilder = (type:JoinType, tableA:Table, tableB:Table): IJoinBuilder => {\r\n    const propA:Property = newProperty({});\r\n    const propB:Property = newProperty({});\r\n\r\n    const builder: IJoinBuilder = {\r\n        withOn:(first:Property, second:Property) : IJoinBuilder => {\r\n            Object.assign(propA, first);\r\n            Object.assign(propB, second);\r\n            return builder;\r\n        },\r\n        using:(property:Property) : IJoinBuilder => {\r\n            Object.assign(propA, property, { table:tableA });\r\n            Object.assign(propB, property, { table:tableB });\r\n            return builder;\r\n        },\r\n        build:() => ({type, propertyA:propA, propertyB:propB})\r\n    }\r\n    return builder;\r\n}\r\n\r\nconst combineRows = (rowA: Row, rowB: Row): Row => {\r\n    const content: any = Object.assign({}, rowA.content);\r\n\r\n    for (const key in rowB.content) {\r\n        if (content[key]) {\r\n            content[`${rowB.table.name}.${key}`] = rowB.content[key];\r\n        } else {\r\n            content[key] = rowB.content[key];\r\n        }\r\n    }\r\n    return { table: rowA.table, key: rowA.key, content, scheme: Object.keys(content) };\r\n}\r\n\r\nconst shouldJoinRows = (rowA:Row, rowB:Row, join:Join):boolean => {\r\n    const a:AnyButFunction = (isRowId(join.propertyA)) ? rowA.key : rowA.content[getLabel(join.propertyA)];\r\n    const b:AnyButFunction = (isRowId(join.propertyB)) ? rowB.key : rowB.content[getLabel(join.propertyB)];\r\n    return (isNumeric(a) && isNumeric(b)) ? Number(a) === Number(b) : a === b;\r\n}\r\n\r\nconst doSideJoin = (rowsA: Row[], rowsB: Row[], join: Join) => {\r\n    const combinedRows: Row[] = [];\r\n    const initRow: Row = rowsB[0];\r\n    const scheme: string[] = Object.keys(initRow.content);\r\n    const emptyRow: Row = newRow({\r\n        table: initRow.table,\r\n        key: initRow.key,\r\n        scheme,\r\n        content: createEmptyObject(scheme)\r\n    });\r\n    let rowToAssign: Row;\r\n    rowsA.forEach((rowA: Row) => {\r\n        rowToAssign = emptyRow;\r\n        rowsB.forEach((rowB: Row) => {\r\n            if (shouldJoinRows(rowA,rowB,join)) {\r\n                rowToAssign = rowB;\r\n            }\r\n        });\r\n        combinedRows.push(combineRows(rowA, rowToAssign));\r\n    });\r\n    return combinedRows;\r\n}\r\n\r\nconst doLeftJoin = (rowsA: Row[], rowsB: Row[], join: Join): any => doSideJoin(rowsA, rowsB, join);\r\nconst doRightJoin = (rowsA: Row[], rowsB: Row[], join: Join): any => doSideJoin(rowsB, rowsA, join);\r\n\r\nconst doJoin = (rowsA: Row[], rowsB: Row[], join: Join): Row[] => {\r\n    const combinedRows: Row[] = [];\r\n\r\n    rowsA.forEach((rowA: Row) => {\r\n        rowsB.forEach((rowB: Row) => {\r\n            if (shouldJoinRows(rowA,rowB,join)) {\r\n                combinedRows.push(combineRows(rowA, rowB));\r\n            }\r\n        });\r\n    });\r\n    return combinedRows;\r\n}\r\n\r\nconst doFullJoin = (rowsA: Row[], rowsB: Row[], join: Join): Row[] => {\r\n    const leftJoin: Row[] = doSideJoin(rowsA, rowsB, join);\r\n    const rightJoin: Row[] = doSideJoin(rowsB, rowsA, join);\r\n\r\n    return [...leftJoin, ...rightJoin];\r\n}\r\n\r\nconst joinFunctions: Map<QuerySyntaxEnum, Fn> = new Map<QuerySyntaxEnum, Fn>([\r\n    [QuerySyntaxEnum.Join, doJoin],\r\n    [QuerySyntaxEnum.FullJoin, doFullJoin],\r\n    [QuerySyntaxEnum.LeftJoin, doLeftJoin],\r\n    [QuerySyntaxEnum.RightJoin, doRightJoin]\r\n]);\r\n\r\nexport const mergeTableB2TableA = (join: Join, results: DataMap) => (tableBContent: any) => {\r\n    const rowsA: Row[] = results.get(join.propertyA.table.name);\r\n    const rowsB: Row[] = parseDataSnapshotToRows(join.propertyB.table, tableBContent);\r\n    const joinFn: Fn = joinFunctions.get(join.type);\r\n    const combinedRows: Row[] = joinFn ? joinFn(rowsA, rowsB, join) : [];\r\n    results.set(join.propertyA.table.name, combinedRows);\r\n    return results;\r\n}\r\n"]}