{"version":3,"file":"queryProcessingUtils.js","sourceRoot":"","sources":["../../src/impl/queryProcessingUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Row, DataMap, InputDataSnapshot, OutputDataSnapshot } from '../api/types';\r\nimport { Limit, Property, Table, QuerySyntaxEnum } from '@chego/chego-api';\r\nimport { newRow, newDataMap } from './utils';\r\nimport { IQueryContext } from '../api/interfaces';\r\nimport { templates } from './templates';\r\n\r\nexport const parseRowsToArray = (result: any[], row: Row): any[] => (result.push(Object.assign({}, row.content)), result);\r\nexport const parseRowsToObject = (result: any, row: Row): any => (Object.assign(result, { [row.key]: row.content }), result);\r\n\r\nexport const shouldFilterRowContent = (properties: Property[]): boolean => properties && properties.length > 0 && properties[0].name !== '*';\r\n\r\nexport const parseDataSnapshotToRows = (table: Table, data: any): Row[] => {\r\n    const rows: Row[] = [];\r\n    let content: any;\r\n    for (const key in data) {\r\n        content = data[key];\r\n        rows.push(newRow({\r\n            table,\r\n            key,\r\n            scheme: Object.keys(content),\r\n            content\r\n        }))\r\n    }\r\n    return rows;\r\n}\r\n\r\n\r\nexport const filterQueryResultsIfRequired = (queryContext: IQueryContext) => (queryResult: DataMap): DataMap => {\r\n    const parsedResult: DataMap = newDataMap();\r\n    const select = templates.get(QuerySyntaxEnum.Select);\r\n    let tableRows: Row[];\r\n\r\n    queryResult.forEach((rows: Row[], tableName: string) => {\r\n        tableRows = rows.filter((row: Row, index: number) => {\r\n            // if (queryContext.conditions.test(row)) {\r\n            //     if (shouldFilterRowContent(queryContext.data) && queryContext.type === QuerySyntaxEnum.Select) {\r\n            //         row.content = queryContext.data.reduce((content: any, property: Property) => select(property)(content)(row), {});\r\n            //     }\r\n            //     return true;\r\n            // }\r\n            return false;\r\n        });\r\n        parsedResult.set(tableName, tableRows);\r\n    });\r\n    return parsedResult;\r\n}\r\n\r\nexport const convertMapToInputData = (tablesMap: DataMap): InputDataSnapshot => {\r\n    const results: InputDataSnapshot = {};\r\n    tablesMap.forEach((rows: Row[], table: string) => {\r\n        Object.assign(results, { [table]: rows.reduce(parseRowsToObject, {}) });\r\n    }, results);\r\n    return results;\r\n}\r\n\r\nexport const convertMapToOutputData = (tablesMap: DataMap): OutputDataSnapshot => {\r\n    const results: OutputDataSnapshot = {};\r\n    tablesMap.forEach((rows: Row[], table: string) => {\r\n        Object.assign(results, { [table]: rows.reduce(parseRowsToArray, []) });\r\n    }, results);\r\n    return results;\r\n}\r\n\r\nexport const spliceQueryResultsIfRequired = (limit: Limit) => (data: any): any => {\r\n    if (limit) {\r\n        const range: number[] = limit.count\r\n            ? [limit.offsetOrCount, limit.count]\r\n            : limit.offsetOrCount < 0\r\n                ? [limit.offsetOrCount]\r\n                : [0, limit.offsetOrCount];\r\n\r\n        for (const table of Object.keys(data)) {\r\n            data[table] = data[table].slice(...range)\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\nconst nullifyRows = (rows: Row[], row: Row): Row[] => [...rows, Object.assign(row, { content: null })];\r\n\r\nconst nullifyRowsContent = (keysToRemove: Property[]) => (rows: Row[], row: Row): Row[] => {\r\n    for (const key of keysToRemove) {\r\n        if(row.scheme.indexOf(key.name) > -1) {\r\n            row.content[key.name] = null;\r\n        }\r\n    }\r\n    return [...rows, row];\r\n}\r\n\r\nexport const containsSelectAllShorthand = (properties: Property[]) => properties.reduce((result:boolean,property:Property) => {\r\n    if(property.name === '*') {\r\n        result = true;\r\n    }\r\n    return result;\r\n},false);\r\n\r\nexport const shouldNullifyEntireRows = (properties: Property[]) => properties.length === 0 || containsSelectAllShorthand(properties);\r\n\r\nexport const nullifyData = (properties: Property[]) => (data: DataMap): DataMap => {\r\n    const action: (rows: Row[], row: Row) => Row[] = shouldNullifyEntireRows(properties) ? nullifyRows : nullifyRowsContent(properties);\r\n    data.forEach((rows: Row[], table: string) => {\r\n        const nullifiedData: Row[] = rows.reduce(action, []);\r\n        data.set(table, nullifiedData);\r\n    });\r\n    return data;\r\n}\r\n\r\nexport const withErrorMessage = (errors: Map<string, Error>): string => {\r\n    const message: string[] = [];\r\n    errors.forEach((error: Error, table: string) => {\r\n        message.push(`Operation on table \"${table}\" failed: ${error.message}`)\r\n    });\r\n    return message.join('\\n');\r\n}\r\n\r\nexport const updateContent = (newContent: any) => (data: DataMap): DataMap => {\r\n    data.forEach((rows: Row[]) => {\r\n        rows.map((row:Row)=>{\r\n            for(const key of Object.keys(newContent)) {\r\n                row.content[key] = newContent[key];\r\n            }\r\n        });\r\n    });\r\n    return data;\r\n}"]}