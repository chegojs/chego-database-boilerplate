{"version":3,"file":"groupBy.js","sourceRoot":"","sources":["../../src/impl/groupBy.ts"],"names":[],"mappings":";;AAAA,mCAAoC;AAKpC,MAAM,YAAY,GAAG,CAAC,OAAsB,EAAE,EAAE,CAAC,CAAC,CAAM,EAAE,CAAM,EAAU,EAAE;IACxE,MAAM,MAAM,GAAgB,OAAO,CAAC,CAAC,CAAC,CAAC;IACvC,MAAM,EAAE,GAAW,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;IACxC,MAAM,MAAM,GAAmB,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACjG,MAAM,MAAM,GAAmB,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACjG,MAAM,UAAU,GAAW,iBAAS,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IAEnE,OAAO,UAAU,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;AACtG,CAAC,CAAA;AAED,MAAM,kBAAkB,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,CAAC,IAAW,EAAE,OAAY,EAAE,EAAE;IACrE,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvC,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,EAAE,CAAC,KAAK,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE;QACzD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;KACrB;IACD,OAAO,IAAI,CAAC;AAChB,CAAC,CAAA;AAEY,QAAA,sBAAsB,GAAG,CAAC,YAA2B,EAAE,EAAE,CAAC,CAAC,IAAwB,EAAO,EAAE;IACrG,MAAM,aAAa,GAAW,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC;IAC1D,IAAI,aAAa,EAAE;QACf,MAAM,MAAM,GAAsB,EAAE,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,SAAiB,EAAE,EAAE;YAC5C,MAAM,EAAE,GAAW,YAAY,CAAC,OAAO,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;YACzE,MAAM,WAAW,GAAS,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;YACtH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,EAAC,CAAC,SAAS,CAAC,EAAC,WAAW,EAAC,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;KACjB;IACD,OAAO,IAAI,CAAC;AAChB,CAAC,CAAA","sourcesContent":["import { basicSort } from './utils';\r\nimport { IQueryContext } from '../api/interfaces';\r\nimport { OutputDataSnapshot } from '../api/types';\r\nimport { SortingData, AnyButFunction } from '@chego/chego-api';\r\n\r\nconst compareUsing = (sorters: SortingData[]) => (a: any, b: any): number => {\r\n    const sortBy: SortingData = sorters[0];\r\n    const by: string = sortBy.property.name;\r\n    const valueA: AnyButFunction = (typeof a[by] === 'string') ? String(a[by]).toLowerCase() : a[by];\r\n    const valueB: AnyButFunction = (typeof b[by] === 'string') ? String(b[by]).toLowerCase() : b[by];\r\n    const sortResult: number = basicSort(valueA, valueB, sortBy.order);\r\n\r\n    return sortResult === 0 && sorters.length > 1 ? compareUsing(sorters.slice(1))(a, b) : sortResult;\r\n}\r\n\r\nconst pickRepresentative = (by: string) => (list: any[], current: any) => {\r\n    const previous = list[list.length - 1];\r\n    if (!previous || (previous && previous[by] !== current[by])) {\r\n        list.push(current)\r\n    }\r\n    return list;\r\n}\r\n\r\nexport const groupResultsIfRequired = (queryContext: IQueryContext) => (data: OutputDataSnapshot): any => {\r\n    const groupByLength: number = queryContext.groupBy.length;\r\n    if (groupByLength) {\r\n        const result:OutputDataSnapshot = {};\r\n        Object.keys(data).forEach((tableName: string) => {\r\n            const by: string = queryContext.groupBy[groupByLength - 1].property.name;\r\n            const groupedRows:any[] = data[tableName].sort(compareUsing(queryContext.groupBy)).reduce(pickRepresentative(by), []);\r\n            Object.assign(result, {[tableName]:groupedRows});\r\n        });\r\n        return result;\r\n    }\r\n    return data;\r\n}"]}