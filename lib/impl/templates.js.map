{"version":3,"file":"templates.js","sourceRoot":"","sources":["../../src/impl/templates.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Row } from '../api/types';\r\nimport { isQueryResult } from './utils';\r\nimport { AnyButFunction, Obj, QuerySyntaxTemplate, Property, FilterResultEnum, QuerySyntaxEnum } from '@chego/chego-api';\r\nimport { isAlias, isRowId } from '@chego/chego-tools';\r\n\r\n\r\nexport const getQueryResultValues = (data: AnyButFunction): AnyButFunction[] => {\r\n    const results: AnyButFunction[] = [];\r\n    Object.values(data).forEach((table: Obj) =>\r\n        Object.values(table).forEach((row: Obj) => results.push(...Object.values(row)))\r\n    );\r\n    return results;\r\n}\r\n\r\nconst parseValue = (value: AnyButFunction): AnyButFunction => {\r\n    if (typeof value === 'string') {\r\n        const dateInMilliseconds: number = Date.parse(value);\r\n        if (!isNaN(dateInMilliseconds)) {\r\n            return dateInMilliseconds;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\nconst isIn = (a: AnyButFunction, ...values: AnyButFunction[]): boolean => { \r\n    const expression = parseValue(a);\r\n     for(const value of values) {\r\n         if(expression === parseValue(value)) {\r\n             return true;\r\n         }\r\n     }\r\n     return false;\r\n};\r\nconst isEq = (a: AnyButFunction, b: AnyButFunction): boolean =>\r\n    typeof a === 'object' && typeof b === 'object'\r\n        ? JSON.stringify(a) === JSON.stringify(b)\r\n        : parseValue(a) === parseValue(b);\r\n\r\nconst isGt = (a: AnyButFunction, b: AnyButFunction): boolean => parseValue(a) > parseValue(b);\r\nconst isLt = (a: AnyButFunction, b: AnyButFunction): boolean => parseValue(a) < parseValue(b);\r\nconst isBetween = (a: AnyButFunction, min: AnyButFunction, max: AnyButFunction): boolean =>\r\n    parseValue(a) >= parseValue(min) && parseValue(a) <= parseValue(max);\r\n\r\nconst isLikeString = (a: string, b: string): boolean =>\r\n    new RegExp(`^${b.replace(/(?<!\\\\)\\%/g, '.*').replace(/(?<!\\\\)\\_/g, '.')}$`, 'g').test(a);\r\n\r\nconst runCondition = (condition: (...args: AnyButFunction[]) => boolean, ...values: any[]): boolean => {\r\n    const data: AnyButFunction[] = [];\r\n    values.forEach((value: any) => {\r\n        if (isQueryResult(value)) {\r\n            const values: AnyButFunction[] = getQueryResultValues(value.getData());\r\n            data.push(...values);\r\n        } else {\r\n            data.push(value);\r\n        }\r\n    });\r\n    return condition(...data);\r\n}\r\n\r\nconst select: QuerySyntaxTemplate = (property: Property) => (content: any) => (row: Row) => {\r\n    if (row.table.name === property.table.name) {\r\n        if (isAlias(property)) {\r\n            content[property.alias] = row.content[property.name];\r\n        }\r\n        else if (isRowId(property)) {\r\n            content[property.alias] = row.key;\r\n        }\r\n        else if (property.name === '*') {\r\n            content = Object.assign(content, row.content);\r\n        }\r\n        else {\r\n            content[property.name] = row.content[property.name];\r\n        }\r\n    }\r\n    return content;\r\n}\r\n\r\nconst conditionTemplate = (condition: (...args: AnyButFunction[]) => boolean, row: Row, property: Property, ...values: any[]) =>\r\n    row.table.name === property.table.name\r\n        ? isRowId(property)\r\n            ? Number(runCondition(condition, row.key, ...values))\r\n            : Number(runCondition(condition, row.content[property.name], ...values))\r\n        : FilterResultEnum.Skipped;\r\n\r\nconst whereIn: QuerySyntaxTemplate = (...values: any[]) => (property: Property) => (row: Row) =>\r\n        conditionTemplate(isIn, row, property, ...values);\r\n\r\nconst eq: QuerySyntaxTemplate = (value: any) => (property: Property) => (row: Row) =>\r\n    conditionTemplate(isEq, row, property, value);\r\n\r\nconst isNull: QuerySyntaxTemplate = () => (property: Property) => eq(null)(property);\r\n\r\nconst gt: QuerySyntaxTemplate = (value: number | string) => (property: Property) => (row: Row) =>\r\n    conditionTemplate(isGt, row, property, value);\r\n\r\nconst lt: QuerySyntaxTemplate = (value: number | string) => (property: Property) => (row: Row) =>\r\n    conditionTemplate(isLt, row, property, value);\r\n\r\nconst between: QuerySyntaxTemplate = (min: number, max: number) => (property: Property) => (row: Row) =>\r\n    conditionTemplate(isBetween, row, property, min, max);\r\n\r\nconst like: QuerySyntaxTemplate = (value: any) => (property: Property) => (row: Row) =>\r\n    typeof value === 'string'\r\n        ? conditionTemplate(isLikeString, row, property, value)\r\n        : conditionTemplate(isEq, row, property, value);\r\n\r\nconst exists: QuerySyntaxTemplate = (value: any) => () => () => {\r\n    const data = value.getData();\r\n    return Array.isArray(data) ? data.length : FilterResultEnum.Skipped;\r\n}\r\n\r\nconst and: QuerySyntaxTemplate = () => () => () => '&&';\r\nconst or: QuerySyntaxTemplate = () => () => () => '||';\r\nconst not: QuerySyntaxTemplate = () => () => () => '!';\r\n\r\nconst openParentheses: QuerySyntaxTemplate = () => () => () => '(';\r\nconst closeParentheses: QuerySyntaxTemplate = () => () => () => ')';\r\n\r\nexport const templates: Map<QuerySyntaxEnum, QuerySyntaxTemplate> = new Map<QuerySyntaxEnum, QuerySyntaxTemplate>([\r\n    [QuerySyntaxEnum.Select, select],\r\n    [QuerySyntaxEnum.EQ, eq],\r\n    [QuerySyntaxEnum.Null, isNull],\r\n    [QuerySyntaxEnum.GT, gt],\r\n    [QuerySyntaxEnum.LT, lt],\r\n    [QuerySyntaxEnum.And, and],\r\n    [QuerySyntaxEnum.Or, or],\r\n    [QuerySyntaxEnum.Not, not],\r\n    [QuerySyntaxEnum.OpenParentheses, openParentheses],\r\n    [QuerySyntaxEnum.CloseParentheses, closeParentheses],\r\n    [QuerySyntaxEnum.Between, between],\r\n    [QuerySyntaxEnum.Like, like],\r\n    [QuerySyntaxEnum.In, whereIn],\r\n    [QuerySyntaxEnum.Exists, exists],\r\n]);"]}