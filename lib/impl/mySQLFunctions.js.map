{"version":3,"file":"mySQLFunctions.js","sourceRoot":"","sources":["../../src/impl/mySQLFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Row, DataMap } from '../api/types';\r\nimport { IQueryContext } from '../api/interfaces';\r\nimport { FunctionData, Property, QuerySyntaxEnum, Fn } from '@chego/chego-api';\r\n\r\nconst parseMin = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    const keyName: string = fnData.properties[0].name;\r\n    let min: any = rows[0].content[keyName];\r\n\r\n    if (!min) {\r\n        return rows;\r\n    }\r\n\r\n    const result: Row = rows[0]; /*clone(rows[0]);*/\r\n\r\n    rows.forEach((row: Row) => {\r\n        if (row.content[keyName] < min) {\r\n            min = row.content[keyName];\r\n        }\r\n    });\r\n\r\n    delete result.content[keyName];\r\n    result.content[fnData.alias] = min;\r\n    return [result];\r\n}\r\n\r\nconst parseMax = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    const keyName: string = fnData.properties[0].name;\r\n    let max: any = rows[0].content[keyName];\r\n\r\n    if (!max) {\r\n        return rows;\r\n    }\r\n\r\n    const result: Row = rows[0]; /*clone(rows[0]);*/\r\n\r\n    rows.forEach((row: Row) => {\r\n        if (row.content[keyName] > max) {\r\n            max = row.content[keyName];\r\n        }\r\n    });\r\n\r\n    delete result.content[keyName];\r\n    result.content[fnData.alias] = max;\r\n    return [result];\r\n}\r\n\r\nconst parseCount = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    const keyName: string = fnData.properties[0].name;\r\n    const result: Row = rows[0]; /*clone(rows[0]);*/\r\n    delete result.content[keyName];\r\n    result.content[fnData.alias] = rows.length;\r\n    return [result];\r\n}\r\n\r\nconst isNumeric = (n: any) => !isNaN(parseFloat(n)) && isFinite(n);\r\n\r\nconst parseSum = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    const keyName: string = fnData.properties[0].name;\r\n    let sum: number = 0;\r\n    let field: number;\r\n    const result: Row = rows[0]; /*clone(rows[0]);*/\r\n\r\n    rows.forEach((row: Row) => {\r\n        field = row.content[keyName];\r\n        if (isNumeric(field)) {\r\n            sum += field;\r\n        }\r\n    });\r\n\r\n    delete result.content[keyName];\r\n    result.content[fnData.alias] = sum;\r\n    return [result];\r\n}\r\nconst parseAvg = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    const keyName: string = fnData.properties[0].name;\r\n    let sum: number = 0;\r\n    let field: number;\r\n    const result: Row = rows[0]; /*clone(rows[0]);*/\r\n\r\n    rows.forEach((row: Row) => {\r\n        field = row.content[keyName];\r\n        if (isNumeric(field)) {\r\n            sum += field;\r\n        }\r\n    });\r\n\r\n    delete result.content[keyName];\r\n    result.content[fnData.alias] = sum / rows.length;\r\n    return [result];\r\n}\r\nconst parsePow = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    const keyName: string = fnData.properties[0].name;\r\n    let field: number;\r\n\r\n    rows.forEach((row: Row) => {\r\n        field = row.content[keyName];\r\n        row.content[fnData.alias] = isNumeric(field) ? Math.pow(field, fnData.exponent) : 0;\r\n        delete row.content[keyName];\r\n    });\r\n\r\n    return rows;\r\n}\r\n\r\nconst parseSqrt = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    const keyName: string = fnData.properties[0].name;\r\n    let field: number;\r\n\r\n    rows.forEach((row: Row) => {\r\n        field = row.content[keyName];\r\n        row.content[fnData.alias] = isNumeric(field) ? Math.sqrt(field) : 0;\r\n        delete row.content[keyName];\r\n    });\r\n\r\n    return rows;\r\n}\r\n\r\nconst parseLeast = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    return rows.reduce((acc: Row[], row: Row) => {\r\n        let min: any = row.content[fnData.properties[0].name]\r\n        min = fnData.properties.reduce((acc: any, tdk: Property) => {\r\n            if (row.content[tdk.name] < min) {\r\n                acc = row.content[tdk.name]\r\n            }\r\n            return acc;\r\n        }, min);\r\n        // remove origins\r\n        row.content[fnData.alias] = min;\r\n        acc.push(row);\r\n        return acc;\r\n    }, []);\r\n}\r\n\r\nconst parseGreatest = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    return rows.reduce((acc: Row[], row: Row) => {\r\n        let max: any = row.content[fnData.properties[0].name]\r\n        max = fnData.properties.reduce((acc: any, tdk: Property) => {\r\n            if (row.content[tdk.name] > max) {\r\n                acc = row.content[tdk.name]\r\n            }\r\n            return acc;\r\n        }, max);\r\n        // remove origins\r\n        row.content[fnData.alias] = max;\r\n        acc.push(row);\r\n        return acc;\r\n    }, []);\r\n}\r\n\r\nconst parseCoalesce = (rows: Row[], fnData: FunctionData): Row[] => {\r\n    return rows.reduce((acc: Row[], row: Row) => {\r\n        let result: any = null;\r\n        for (const property of fnData.properties) {\r\n            if (row.content[property.name]) {\r\n                result = row.content[property.name];\r\n                break;\r\n            }\r\n        }\r\n        // remove origins\r\n        row.content[fnData.alias] = result;\r\n        acc.push(row);\r\n        return acc;\r\n    }, []);\r\n}\r\n\r\nconst mysqlFunctions: Map<QuerySyntaxEnum, Fn> = new Map<QuerySyntaxEnum, Fn>([\r\n    [QuerySyntaxEnum.Min, parseMin],\r\n    [QuerySyntaxEnum.Max, parseMax],\r\n    [QuerySyntaxEnum.Sum, parseSum],\r\n    [QuerySyntaxEnum.Sqrt, parseSqrt],\r\n    [QuerySyntaxEnum.Pow, parsePow],\r\n    [QuerySyntaxEnum.Avg, parseAvg],\r\n    [QuerySyntaxEnum.Least, parseLeast],\r\n    [QuerySyntaxEnum.Greatest, parseGreatest],\r\n    [QuerySyntaxEnum.Coalesce, parseCoalesce]\r\n]);\r\n\r\nconst applyMySQLFunctions = (functions: FunctionData[], tableName?: string) => (rows: Row[], key: string, map: DataMap): void => {\r\n    let parsedRows: Row[] = [];\r\n    functions.forEach((fnData: FunctionData) => {\r\n        const mySQLFn: Fn = mysqlFunctions.get(fnData.type);\r\n        if (mySQLFn && fnData.properties[0].table.name === (tableName ? tableName : key)) {\r\n            parsedRows = [...parsedRows, ...mySQLFn(rows, fnData)];\r\n        }\r\n    });\r\n    map.set(key, parsedRows);\r\n}\r\n\r\nexport const applyMySQLFunctionsIfAny = (queryContext: IQueryContext) => (data: DataMap): DataMap => {\r\n    if (queryContext.functions.length) {\r\n        data.forEach(applyMySQLFunctions(queryContext.functions));\r\n    }\r\n    return data;\r\n}"]}