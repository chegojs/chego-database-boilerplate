{"version":3,"file":"orderBy.js","sourceRoot":"","sources":["../../src/impl/orderBy.ts"],"names":[],"mappings":";;AACA,mCAAoC;AAGpC,MAAM,YAAY,GAAG,CAAC,OAAqB,EAAE,EAAE,CAAC,CAAC,CAAK,EAAE,CAAK,EAAS,EAAE;IACpE,MAAM,MAAM,GAAe,OAAO,CAAC,CAAC,CAAC,CAAC;IACtC,MAAM,EAAE,GAAU,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;IACvC,MAAM,MAAM,GAAkB,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAChG,MAAM,MAAM,GAAkB,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAChG,MAAM,UAAU,GAAU,iBAAS,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IAElE,OAAO,UAAU,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;AACrG,CAAC,CAAA;AAEY,QAAA,sBAAsB,GAAG,CAAC,YAA2B,EAAE,EAAE,CAAC,CAAC,IAAS,EAAO,EAAE;IACtF,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE;QAC7B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,SAAgB,EAAC,EAAE;YAC1C,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;KACN;IACD,OAAO,IAAI,CAAC;AAChB,CAAC,CAAA","sourcesContent":["import { SortingData, AnyButFunction } from '@chego/chego-api';\r\nimport { basicSort } from './utils';\r\nimport { IQueryContext } from '../api/interfaces';\r\n\r\nconst compareUsing = (sorters:SortingData[]) => (a:any, b:any):number => {\r\n    const sortBy:SortingData = sorters[0];\r\n    const by:string = sortBy.property.name;\r\n    const valueA:AnyButFunction = (typeof a[by] === 'string') ? String(a[by]).toLowerCase() : a[by];\r\n    const valueB:AnyButFunction = (typeof b[by] === 'string') ? String(b[by]).toLowerCase() : b[by];\r\n    const sortResult:number = basicSort(valueA, valueB, sortBy.order);\r\n\r\n    return sortResult === 0 && sorters.length > 1 ? compareUsing(sorters.slice(1))(a,b) : sortResult;\r\n}\r\n\r\nexport const orderResultsIfRequired = (queryContext: IQueryContext) => (data: any): any => {\r\n    if (queryContext.orderBy.length) {\r\n        Object.keys(data).forEach((tableName:string)=>{\r\n            data[tableName].sort(compareUsing(queryContext.orderBy));\r\n        });\r\n    }\r\n    return data;\r\n}"]}