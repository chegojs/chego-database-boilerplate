{"version":3,"file":"executor.js","sourceRoot":"","sources":["../../src/impl/executor.ts"],"names":[],"mappings":"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","sourcesContent":["import { QueryPipelinesMap, QueryPipeline } from './../api/types';\r\nimport { IQuery, IQueryScheme, IQuerySchemeArray, IQuerySchemeElement, QuerySyntaxEnum } from '@chego/chego-api';\r\nimport { IQueryContext, IQueryContextBuilder, IQueriesExecutor } from '../api/interfaces';\r\nimport { newQueryContextBuilder } from './contextBuilder';\r\nimport { isQueryScheme, withValidator } from '@chego/chego-tools';\r\nimport { validators } from './validators';\r\n\r\nconst parseScheme = (scheme: IQueryScheme): IQueryContext[] => {\r\n    let queryScope: IQueryContext[] = [];\r\n    const contextBuilder: IQueryContextBuilder = newQueryContextBuilder();\r\n    const schemeArr: IQuerySchemeArray = scheme.toArray();\r\n\r\n    schemeArr.map((element: IQuerySchemeElement) => {\r\n        let args: any = element.params;\r\n        if (Array.isArray(element.params) && isQueryScheme(element.params[0])) {\r\n            const subQueryScope: IQueryContext[] = parseScheme(element.params[0]);\r\n            queryScope = [...subQueryScope, ...queryScope];\r\n            const subQuery: IQueryContext = subQueryScope[0];\r\n            args = [subQuery.result];\r\n        }\r\n        if (validators.has(element.type)) {\r\n            validators.get(element.type)(...args);\r\n        }\r\n        contextBuilder.with(element.type, args);\r\n    });\r\n    queryScope.push(contextBuilder.build());\r\n    return queryScope;\r\n};\r\n\r\nconst pickPipeline = (pipelines: QueryPipelinesMap, type: QuerySyntaxEnum) => (): Promise<QueryPipeline> =>\r\n    new Promise((resolve, reject) => {\r\n        const pipeline: QueryPipeline = pipelines.get(type);\r\n        return pipeline ? resolve(pipeline) : reject('No pipeline');\r\n    });\r\n\r\nconst buildQueryScope = (query: IQuery) => () => {\r\n    const queryScope: IQueryContext[] = parseScheme(query.scheme);\r\n    if (!queryScope) {\r\n        throw new Error('Empty QueryScope');\r\n    }\r\n    return Promise.resolve(queryScope);\r\n}\r\nconst executeQueryScope = (dbRef: object, pipelines: QueryPipelinesMap) => (queryScope: IQueryContext[]) =>\r\n    queryScope.reduce((queries, query) =>\r\n        queries.then(pickPipeline(pipelines, query.type))\r\n            .then((pipeline: QueryPipeline) => pipeline(dbRef, query))\r\n            .then((result) => { query.result.setData(result); return result; }),\r\n            Promise.resolve());\r\n\r\nexport const newExecutor = (): IQueriesExecutor => {\r\n    let queryPipelines: QueryPipelinesMap;\r\n    let dbRef: object;\r\n\r\n    const executeQueries = (queries: IQuery[]) => new Promise((resolve, reject) => queries.reduce((queries, query) =>\r\n        queries\r\n            .then(buildQueryScope(query))\r\n            .then(executeQueryScope(dbRef, queryPipelines)),\r\n        Promise.resolve())\r\n        .then(resolve)\r\n        .catch(reject))\r\n\r\n    const executor: IQueriesExecutor = {\r\n        withPipelines: (pipelines: QueryPipelinesMap): IQueriesExecutor => (queryPipelines = pipelines, executor),\r\n        withDBRef: (ref: object): IQueriesExecutor => (dbRef = ref, executor),\r\n        execute: (queries: IQuery[]): Promise<any> => withValidator<Promise<any>>()\r\n            .check(() => queryPipelines !== undefined)\r\n            .check(() => dbRef !== undefined)\r\n            .thenCall(executeQueries, queries)\r\n    }\r\n    return executor;\r\n}\r\n"]}