{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/impl/utils.ts"],"names":[],"mappings":";;AACA,gDAAkE;AAGrD,QAAA,iBAAiB,GAAG,CAAC,IAAc,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAQ,EAAE,CAAS,EAAE,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAEjH,QAAA,UAAU,GAAG,CAAC,QAAgB,EAAW,EAAE,CAAC,IAAI,GAAG,CAAgB,QAAQ,CAAC,CAAC;AAE7E,QAAA,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,GAAG,GAAG,EAAE,EAAE,MAAM,GAAG,EAAE,EAAE,OAAO,GAAG,EAAE,EAAO,EAAO,EAAE,CAAC,CAAC;IACxF,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO;CAC9B,CAAC,CAAC;AAEU,QAAA,6BAA6B,GAAG,CAAC,KAAa,EAAoB,EAAE;IAC7E,MAAM,KAAK,GAAW,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;IACnD,OAAO,KAAK;QACR,CAAC,CAAO,4BAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAO,4BAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,4BAAgB,CAAC,GAAG;QACxF,CAAC,CAAC,4BAAgB,CAAC,GAAG,CAAC;AAC/B,CAAC,CAAA;AAEY,QAAA,aAAa,GAAG,CAAC,KAAU,EAAyB,EAAE,CAAC,KAAK,IAAmB,KAAM,CAAC,OAAO,KAAK,SAAS,CAAC;AAC5G,QAAA,SAAS,GAAG,CAAC,CAAM,EAAE,CAAM,EAAE,SAA2B,EAAE,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAE1G,QAAA,SAAS,GAAG,CAAC,CAAK,EAAU,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import { DataMap, Row } from '../api/types';\r\nimport { SortingOrderEnum, IQueryResult } from '@chego/chego-api';\r\n\r\n\r\nexport const createEmptyObject = (keys: string[]) => keys.reduce((acc: any, c: string) => { acc[c] = null; return acc; }, {});\r\n\r\nexport const newDataMap = (iterable?: any[]): DataMap => new Map<string, Row[]>(iterable);\r\n\r\nexport const newRow = ({ table = null, key = '', scheme = [], content = {} }: Row): Row => ({\r\n    table, key, scheme, content\r\n});\r\n\r\nexport const parseStringToSortingOrderEnum = (value: string): SortingOrderEnum => {\r\n    const order: string = value && value.toUpperCase();\r\n    return order\r\n        ? (<any>SortingOrderEnum)[order] ? (<any>SortingOrderEnum)[order] : SortingOrderEnum.ASC\r\n        : SortingOrderEnum.ASC;\r\n}\r\n\r\nexport const isQueryResult = (value: any): value is IQueryResult => value && (<IQueryResult>value).getData !== undefined;\r\nexport const basicSort = (a: any, b: any, direction: SortingOrderEnum) => direction * ((a < b) ? -1 : (a > b) ? 1 : 0);\r\n\r\nexport const isNumeric = (n:any):boolean => !isNaN(parseFloat(n)) && isFinite(n);"]}